      *================================================================* R09039#
      *   SSSSSSSS  MMMMMMMMMMMMM   FFFFFFFFF 111111 111111   00000000 * R09039#
      * SSSSSSSSSS MMMMMMMMMMMMMMM  FFFFFFFFF 111111 111111  0000000000* R09039#
      * SSSS       MMMMMMMMMMMMMMM  FFFF       1111   1111   000    000* R09039#
      * SSSS       MMM   MMM   MMM  FFFF       1111   1111   000    000* R09039#
      * SSSS       MMM   MMM   MMM  FFFF       1111   1111   000    000* R09039#
      * SSSSSSSSS  MMM   MMM   MMM  FFFFFFFFF  1111   1111   000    000* R09039#
      *    SSSSSSS MMM   MMM   MMM  FFFFFFFFF  1111   1111   000    000* R09039#
      *       SSSS MMM   MMM   MMM  FFFF       1111   1111   000    000* R09039#
      *       SSSS MMM   MMM   MMM  FFFF       1111   1111   000    000* R09039#
      *       SSSS MMM   MMM   MMM  FFFF       1111   1111   000    000* R09039#
      *       SSSS MMM   MMM   MMM  FFFF       1111   1111   000    000* R09039#
      *SSSSSSSSSSS MMM   MMM   MMM  FFFF      111111 111111  0000000000* R09039#
      *SSSSSSSSS   MMM   MMM   MMM  FFFF      111111 111111   00000000 * R09039#
      *================================================================* R09039#
      ****************************************************************** R09039#
      *================================================================* R09039#
      *   This program is distributed without warranty of any kind,    * R09039#
      * including  (without limitation) warranties of merchantability  * R09039#
      * and of fitness for a particular purpose. it is up to the user  * R09039#
      * to make his own determination of the usefulness of this progra * R09039#
      * in his own system.                                             * R09039#
      *================================================================* R09039#
      *================================================================* R09039#
      *  CREATE DATE: FEB 08,2009                                      * R09039#
      *  AUTHOR     : KEVIN KANG DENGSONG                              * R09039#
      *  VERSION    : V1.00                                            * R09039#
      *================================================================* R09039#
      *                                                                  R09039#
      **
       01 CICS-PE-RECORD.
      * Transaction identification.
         10  DS-PE-TASK-TRAN          PIC X(004).
      * Terminal or session identification. This field is null if the task is
      * not associated with a terminal or session.
         10  DS-PE-TERM-TERM          PIC X(004).
      * User identification at task creation. This can also be the remote user
      * identifier for a task created as the result of receiving an ATTACH
      * request across an MRO or APPC link with attach-time security enabled.
         10  DS-PE-CICS-USERID        PIC X(008).
      * Transaction start type. The high-order bytes (0 and 1) are set to:
      * 'TO '
      * Attached from terminal input
      * 'S '
      * Attached by automatic transaction initiation (ATI) without data
      * 'SD'
      * Attached by automatic transaction initiation (ATI) with data
      * 'QD'
      * Attached by transient data trigger level
      * 'U '
      * Attached by user request
      * 'TP'
      * Attached from terminal TCTTE transaction ID
      * 'SZ'
      * Attached by Front End Programming Interface (FEPI).
         10  DS-PE-TASK-TTYPE         PIC X(004).
      *  Start time of measurement interval. This is one of the following:
      *  " The time at which the user task was attached
      *  " The time at which data recording was most recently reset in support
      *  of the MCT user event monitoring point DELIVER option or the monitoring
      *  options MNCONV, MNSYNC, or FREQUENCY.
      *  For more information, see "Clocks and time stamps" in topic 2.3.6.1.
      *  Note: Response Time = STOP - START. For more information, see "A note
      *  about response time" in topic 2.3.7.2.
         10  DS-PE-CICS-START         PIC X(008).
      *  Finish time of measurement interval. This is either the time at which
      *  the user task was detached, or the time at which data recording was
      *  completed in support of the MCT user event monitoring point DELIVER
      *  option or the monitoring options MNCONV, MNSYNC or FREQUENCY. For more
      *  information, see "Clocks and time stamps" in topic 2.3.6.1.
      *  Note: Response Time = STOP - START. For more information, see "A note
      *  about response time" in topic 2.3.7.2.
         10  DS-PE-CICS-STOP          PIC X(008).
      * Transaction identification number.
      * Note: The transaction number field is normally a 4-byte packed decimal
      * number. However, some CICS system tasks are identified by special
      * character 'transaction numbers', as follows:
      * " ' III' for system initialization task
      * " ' TCP' for terminal control.
      * These special identifiers are placed in bytes 2 through 4. Byte 1 is a
      * blank (X'40') before the terminal control TCP identifier, and a null
      * value (X'00') before the others.
         10  DS-PE-TASK-TRANNUM       PIC 9(007) COMP-3.
      * Transaction priority when monitoring of the task was initialized
      * (low-order byte-3).
         10  DS-PE-TASK-TRANPRI       PIC 9(008) COMP.
      * Transaction class name. This field is null if the transaction is not in
      * a TRANCLASS.
         10  DS-PE-TASK-TCLSNAME      PIC X(008).
      * VTAM logical unit name (if available) of the terminal associated with
      * this transaction. If the task is executing in an application-owning or
      * file-owning region, the LUNAME is the generic applid of the originating
      * connection for MRO, LUTYPE6.1, and LUTYPE6.2 (APPC). The LUNAME is blank
      * if the originating connection is an external CICS interface (EXCI).
         10  DS-PE-TERM-LUNAME        PIC X(008).
      * The name of the first program invoked at attach-time.
      * For a remote transaction:
      * " If this CICS definition of the remote transaction does not specify a
      * program name, this field contains blanks.
      * " If this CICS definition of the remote transaction specifies a program
      * name, this field contains the name of the specified program. (Note that
      * this is not necessarily the program that is run on the remote system.)
      * For a dynamically-routed transaction, if the dynamic transaction routing
      * program routes the transaction locally and specifies an alternate
      * program name, this field contains the name of the alternate program.
      * For a dynamic program link (DPL) mirror transaction, this field contains
      * the initial program name specified in the dynamic program LINK request.
      * DPL mirror transactions can be identified using byte 1 of the
      * transaction flags, TRANFLAG (164), field.
      * For an ONC RPC or WEB alias transaction, this field contains the initial
      * application program name invoked by the alias transaction. ONC RPC or
      * WEB alias transactions can be identified using byte 1 of the transaction
      * flags, TRANFLAG (164), field.
         10  DS-PE-PROG-PGMNAME       PIC X(008).
      * Fully qualified name by which the originating system is known to
      * the VTAM network. This name is assigned at attach time using
      * either the netname derived from the TCT (when the task is
      * attached to a local terminal), or the netname passed as part of
      * an ISC APPC or IRC attach header. At least three padding bytes
      * (X'00') are present at the right end of the name.
      * If the originating terminal is VTAM across an ISC APPC or IRC
      * link, the NETNAME is the networkid.LUname. If the terminal is
      * non-VTAM, the NETNAME is networkid.generic_applid.
      * All originating information passed as part of an ISC LUTYPE6.1
      * attach header has the same format as the non-VTAM terminal
      * originators above.
      * When the originator is communicating over an external CICS
      * interface (EXCI) session, the name is a concatenation of:
      *   'DFHEXCIU ¦ .       ¦  MVS Id    ¦  Address Space Id (ASID)'
      *             8 bytes  ¦ 1 byte  ¦  4 bytes   ¦  4 bytes
      *
      * derived from the originating system. That is, the name is a
      * 17-byte LU name consisting of:
      * " An 8-byte eye-catcher set to 'DFHEXCIU'.
      * " A 1-byte field containing a period (.).
      * " A 4-byte field containing the MVSID, in characters, under
      * which the client program is running.
      * " A 4-byte field containing the address space id (ASID) in which
      * the client program is running. This field contains the
      * 4-character EBCDIC representation of the 2-byte hex address
      * space id.
      *
         10  DS-PE-TASK-NETUOWPX      PIC X(020).
      * Name by which the network unit of work id is known within the
      * originating system. This name is assigned at attach time using
      * either an STCK-derived token (when the task is attached to a
      * local terminal), or the network unit of work id passed as part
      * of an ISC (APPC) or IRC (MRO) attach header.
      * The first six bytes of this field are a binary value derived
      * from the system clock of the originating system and which can
      * wrap round at intervals of several months.
      * The last two bytes of this field are for the period count.
      * These may change during the life of the task as a result of
      * syncpoint activity.
      * Note: When using MRO or ISC, the NETUOWSX field must be
      * combined with the NETUOWPX field (097) to uniquely identify a
      * task, because NETUOWSX is unique only to the originating CICS
      * system.
      *
         10  DS-PE-TASK-NETUOWSX      PIC X(008).
      * The name (system ID) of the remote system to which this
      * transaction was routed either statically or dynamically.
      * This field can also be the connection name (system ID) of the
      * remote system to which this transaction was routed when using
      * the CRTE routing transaction. The field will be null for those
      * CRTE transactions which establish or cancel the transaction
      * routing session.
      * Note: If the transaction was not routed or was routed locally,
      * this field is set to null. Also see the program name (field
      * 71).
      *
         10  DS-PE-CICS-RSYSID        PIC X(004).
      * The number of performance class records written by the CICS
      * Monitoring Facility (CMF) for the user task.
         10  DS-PE-CICS-PERRECNT      PIC 9(009) COMP.
      *
      * The identifier of the unit of work (unit of recovery) for this
      * task. Unit of recovery values are used to synchronize recovery
      * operations among CICS and other resource managers, such as IMS
      * and DB2.
      *
         10  DS-PE-TASK-RMUOWID       PIC X(008).
      *  The MVS Workload Manager (WLM) service class for this transaction
         10  DS-PE-CICS-SRVCLSNM      PIC X(008).
      *  The MVS Workload Manager (WLM) report class for this transaction
         10  DS-PE-CICS-RPTCLSNM      PIC X(008).
      * Transaction facility name. This field is null if the
      * transaction is not associated with a facility. The transaction
      * facility type (if any) can be identified using byte 0 of the
      * transaction flags, TRANFLAG, (164) field.
         10  DS-PE-TASK-FCTYNAME      PIC X(004).
      *   Transaction flags, a string of 64 bits used for signaling transaction
      *   definition AND status information
         10  DS-PE-TASK-TRANFLAG      PIC X(008).
      *   Terminal or session information for this task's principal facility as
      *   identified in the 'TERM' field id 002. This field is null if the task
      *   is not associated with a terminal or session facility.
      *   Transaction flags, a string of 64 bits used for signalin
      *   transaction definition and status information:
      *   Byte 0
      *   Transaction facility identification
      *   Bit 0
      *   Transaction facility name = none (x'80')
      *   Bit 1
      *   Transaction facility name = terminal (x'40')
      *   If this Bit is set, FCTYNAME and TERM contain the same
      *   terminal id.
      *   Bit 2
      *   Transaction facility name = surrogate (x'20')
      *   Bit 3
      *   Transaction facility name = destination (x'10')
      *   Bit 4
      *   Transaction facility name = 3270 bridge (x'08')
      *   Bits 5-7
      *   Reserved
      *   Byte 1
      *   Transaction identification information
      *   Bit 0
      *   System transaction (x'80')
      *   Bit 1
      *   Mirror transaction (x'40')
      *   Bit 2
      *   DPL mirror transaction (x'20')
      *   Bit 3
      *   ONC/RPC Alias transaction (x'10')
      *   Bit 4
      *   WEB Alias transaction (x'08')
      *   Bit 5
      *   3270 Bridge transaction (x'04')
      *   Bit 6
      *   Bit 7
      *   CICS BTS Run transaction
      *   Byte 2
      *   MVS workload manager request (transaction) completion
      *   information
      *   Bit 0
      *   Report the total response time (begin-to-end phase) for
      *   completed work request (transaction)
      *   Bit 1
      *   Notify that the entire execution phase of the work request is
      *   complete
      *   Bit 2
      *   Notify that a subset of the execution phase of the work
      *   request
      *   is complete
      *   Bits 3-7
      *   Reserved
      *   Byte 3
      *    Transaction definition information
      *    Bit 0
      *    Taskdataloc = below (x'80')
      *    Bit 1
      *    Taskdatakey = cics (x'40')
      *    Bit 2
      *    Isolate = no (x'20')
      *    Bit 3
      *    Dynamic = yes (x'10')
      *    Bits 4-7
      *    Reserved
      *    Byte 4
      *    Transaction origin type
      *    # Byte 5
      *    Transaction status information
      *
      *    # Bits 0-5
      *    Reserved
      *
      *    # Bit 6
      *    Task purged on an open TCB
      *
      *    # Bit 7
      *    Task abnormally terminated
      *
      *    # Note: If bit 6 is set, the task has been purged while
      *    # running on an open TCB, and its transaction timing
      *    # clocks have been left in an unreliable state. Because
      *    # of this, the clocks will be set to zero when the
      *    # record is written by the CICS Monitoring Facility
      *    # (CMF).
      *    Byte 6
      *    JVM information
      *    Bit 0
      *    JVM marked unresettable
      *    Bits 1-7
      *    Reserved
      *    Byte 7
      *    Recovery manager information
      *    Bit 0
      *    Indoubt wait = no
      *    Bit 1
      *    Indoubt action = commit
      *    Bit 2
      *    Recovery manager - UOW resolved with indoubt action
      *    Bit 3
      *    Recovery manager - Shunt
      *    Bit 4
      *    Recovery manager - Unshunt
      *    Bit 5
      *    Recovery manager - Indoubt failure
      *    Bit 6
      *    Recovery manager - Resource owner failure
      *    Bit 7
      *    Reserved
      *    Note: Bits 2 through 6 will be reset on a SYNCPOINT request
      *    when the MNSYNC=YES option is specified.
         10  DS-PE-TERM-TERMINFO      PIC X(004).
      *   Terminal session connection name.
         10  DS-PE-TERM-TERMCNNM      PIC X(004).
      *   Bridge listener transaction identifier
         10  DS-PE-TASK-BRDGTRAN      PIC X(004).
      *   RRMS/MVS unit-of-recovery ID (URID).
         10  DS-PE-TASK-RRMSURID      PIC X(016).
      *   The name of the CICS business transaction service (BTS)
      *   process of which the user task formed part.
         10  DS-PE-CBTS-PRCSNAME      PIC X(036).
      *   The process-type of the CICS BTS process of which the user
      *   task formed part.
         10  DS-PE-CBTS-PRCSTYPE      PIC X(008).
      *   The CICS-assigned identifier of the CICS BTS root activity
      *   that the user task implemented.
         10  DS-PE-CBTS-PRCSID        PIC X(052).
      *   The CICS-assigned identifier of the CICS BTS activity that the
      *   user task implemented.
         10  DS-PE-CBTS-ACTVTYID      PIC X(052).
      *   The name of the CICS BTS activity that the user task
      *   implemented.
         10  DS-PE-CBTS-ACTVTYNM      PIC X(016).
      *   The client IP address (nnn.nnn.nnn.nnn)
         10  DS-PE-SOCK-CLIPADDR      PIC X(016).
      *  The transaction group ID is assigned at transaction attach time, and
      *  can be used to correlate the transactions that CICS executes for the
      *  same incoming work request (for example, the CWXN and CWBA
      *  transactions for Web requests). This transaction group ID
      *  relationship is useful when applied to the requests that originate
      *  through the CICS Web, IIOP, ECI over TCP/IP, or 3270 bridge interface,
      *  as indicated by the transaction origin in Bytes 4 of the transaction
      *  flags field (group name DFHTASK, field ID 164).
      *
         10  DS-PE-TASK-TRNGRPID      PIC X(028).
      *  NETID if a network qualified name has been received from VTAM.
      *  If it is a VTAM resource and the network qualified name has not
      *  yet been received, NETID is 8 blanks. In all other cases it is
      *  nulls.
         10  DS-PE-TERM-NETID         PIC X(008).
      * Real network name if a network qualified name has been received
      * from VTAM. In all other cases this field will be the same as
      * LUNAME (field id 111). For non-VTAM resources it is nulls.
      *
         10  DS-PE-TERM-RLUNAME       PIC X(008).
      * Real network name if a network qualified name has been received
      * from VTAM. In all other cases this field will be the same as
      * LUNAME (field id 111). For non-VTAM resources it is nulls.
         10  DS-PE-SOCK-TCPSRVCE      PIC X(008).
      * The TCP/IP port number of the TCP/IP service which attached the
      * user task.
         10  DS-PE-SOCK-PORTNUM       PIC 9(009) COMP.
      * This field is the first 128 bytes of the Object Transaction
      * Service (OTS) Transaction ID (TID).
         10  DS-PE-TASK-OTSTID        PIC X(128).
      * Task error flags, a string of 32 bits used for signaling unusual
      * conditions occurring during the user task:
      * Bit 0
      * Reserved
      * Bit 1
      * Detected an attempt either to start a user clock that was
      * already running, or to stop one that was not running
      * Bits 2-31
      * Reserved
         10  DS-PE-TASK-TASKFLAG      PIC X(004).
      * Original abend code.
         10  DS-PE-PROG-ABCODEO       PIC X(004).
      * CURRENT ABEND CODE.
         10  DS-PE-PROG-ABCODEC       PIC X(004).
      *   Performance record type (low-order byte-3):
      *   C
      *   Record output for a terminal converse
      *   D
      *   Record output for a user EMP DELIVER request
      *   F
      *   Record output for a long-running transaction
      *   S
      *   Record output for a syncpoint
      *   T
      *   Record output for a task termination.
      *
         10  DS-PE-CICS-RTYPE         PIC X(004).
      *   NUMBER OF MESSAGES RECEIVED FROM THE TASK'S PRINCIPAL TERMINAL
      *   FACILITY, INCLUDING LUTYPE6.1 AND LUTYPE6.2 (APPC) BUT NOT MRO
      *  (IRC)
         10  DS-PE-TERM-TCMSGIN1      PIC 9(009) COMP.
      *   Number of characters received from the task's principal terminal
      *   facility, including LUTYPE6.1 and LUTYPE6.2 (APPC) but not MRO
      *   (IRC)
         10  DS-PE-TERM-TCCHRIN1      PIC 9(009) COMP.
      *  Number of messages sent to the task's principal terminal facility,
      *   including LUTYPE6.1 and LUTYPE6.2 (APPC) but not MRO (IRC).
         10  DS-PE-TERM-TCMSGOU1      PIC 9(009) COMP.
      *  Number of characters sent to the task's principal terminal facility,
      *  including LUTYPE6.1 and LUTYPE6.2 (APPC) but not MRO (IRC).
         10  DS-PE-TERM-TCCHROU1      PIC 9(009) COMP.
      * Number of messages received from the LUTYPE6.1 alternate terminal
      * facilities by the user task.
         10  DS-PE-TERM-TCMSGIN2      PIC 9(009) COMP.
      * Number of characters received from the LUTYPE6.1 alternate terminal
      * facilities by the user task. (Not applicable to ISC APPC.)
         10  DS-PE-TERM-TCCHRIN2      PIC 9(009) COMP.
      * Number of messages sent to the LUTYPE6.1 alternate terminal
      * facilities by the user task.
         10  DS-PE-TERM-TCMSGOU2      PIC 9(009) COMP.
      * Number of characters sent to the LUTYPE6.1 alternate terminal
      * facilities by the user task. (Not applicable to ISC APPC.)
         10  DS-PE-TERM-TCCHROU2      PIC 9(009) COMP.
      * Number of messages received from the alternate facility by the
      * user task for LUTYPE6.2 (APPC) sessions.
         10  DS-PE-TERM-TCM62IN2      PIC 9(009) COMP.
      * Number of characters received from the alternate facility by the
      * user task for LUTYPE6.2 (APPC) sessions.
         10  DS-PE-TERM-TCC62IN2      PIC 9(009) COMP.
      * Number of messages sent to the alternate facility by the user
      * task for LUTYPE6.2 (APPC) sessions.
         10  DS-PE-TERM-TCM62OU2      PIC 9(009) COMP.
      * Number of characters sent to the alternate facility by the user
      * task for LUTYPE6.2 (APPC) sessions.
         10  DS-PE-TERM-TCC62OU2      PIC 9(009) COMP.
      * Number of TCTTE ALLOCATE requests issued by the user task for
      * LUTYPE6.2 (APPC), LUTYPE6.1, and IRC sessions.
         10  DS-PE-TERM-TCALLOCT      PIC 9(009) COMP.
      * Number of user-storage GETMAIN requests issued by the user
      * task below the 16MB line, in the UDSA.
         10  DS-PE-STOR-SCUGETCT      PIC 9(009) COMP.
      * Number of user-storage GETMAIN requests issued by the user task
      * for storage above the 16MB line, in the extended user dynamic
      * storage area (EUDSA).
         10  DS-PE-STOR-SCUGETCT-E    PIC 9(009) COMP.
      * Number of user-storage GETMAIN requests issued by the user task
      * for storage below the 16MB line, in the CDSA.
         10  DS-PE-STOR-SCCGETCT      PIC 9(009) COMP.
      * Number of user-storage GETMAIN requests issued by the user task
      * for storage above the 16MB line, in the ECDSA.
         10  DS-PE-STOR-SCCGETCT-E    PIC 9(009) COMP.
      * Maximum amount (high-water mark) of user storage allocated to
      * the user task below the 16MB line, in the user dynamic storage
      * area (UDSA).
         10  DS-PE-STOR-SCUSRHWM      PIC 9(009) COMP.
      * Maximum amount (high-water mark) of user-storage allocated to
      * the user task above the 16MB line, in the EUDSA.
         10  DS-PE-STOR-SCUSRHWM-E    PIC 9(009) COMP.
      * Maximum amount (high-water mark) of user-storage allocated to
      * the user task below the 16MB line, in the CICS dynamic storage area
      * (CDSA).
         10  DS-PE-STOR-SC24CHWM      PIC 9(009) COMP.
      * Maximum amount (high-water mark) of user-storage allocated to
      * the user task above the 16MB line, in the extended CICS dynamic storage
      * area (ECDSA).
         10  DS-PE-STOR-SC31CHWM      PIC 9(009) COMP.
      *Storage occupancy of the user task below the 16MB line, in the UDSA. This
      * measures the area under the curve of storage in use against elapsed time
      *. For more information about storage occupancy, see "A note about storage
      * occupancy counts" in topic 2.3.7.8.
         10  DS-PE-STOR-SCUSRSTG      PIC 9(018) COMP.
      * Storage occupancy of the user task above the 16MB line, in the EUDSA.
      * This measures the area under the curve of storage in use against elapsed
      * time. For more information, see "A note about storage occupancy counts"
      *iin topic 2.3.7.8.
         10  DS-PE-STOR-SCUCRSTG      PIC 9(018) COMP.
      * Storage occupancy of the user task below the 16MB line, in the CDSA.
      * This measures the area under the curve of storage in use against elapsed
      * time. For more information, see "A note about storage occupancy counts"
      * in topic 2.3.7.8.
         10  DS-PE-STOR-SC24COCC      PIC 9(018) COMP.
      * Storage occupancy of the user task above the 16MB line, in the ECDSA.
      * This measures the area under the curve of storage in use against
      * elapsed time. For more information, see "A note about storage occupancy
      * counts" in topic 2.3.7.8.
         10  DS-PE-STOR-SC31COCC      PIC 9(018) COMP.
      * Number of storage GETMAIN requests issued by the user task for shared
      * storage below the 16MB line, in the CDSA or SDSA.
         10  DS-PE-STOR-SC24SGCT      PIC 9(009) COMP.
      * Number of bytes of shared storage GETMAINed by the user task below the
      * 16MB line, in the CDSA or SDSA.
         10  DS-PE-STOR-SC24GSHR      PIC 9(009) COMP.
      * Number of bytes of shared storage FREEMAINed by the user task below
      * the 16MB line, in the CDSA or SDSA.
         10  DS-PE-STOR-SC24FSHR      PIC 9(009) COMP.
      * Number of storage GETMAIN requests issued by the user task for
      * shared storage above the 16MB line, in the ECDSA or ESDSA.
         10  DS-PE-STOR-SC31SGCT      PIC 9(009) COMP.
      * Number of bytes of shared storage GETMAINed by the user task above
      * the 16MB line, in the ECDSA or ESDSA.
         10  DS-PE-STOR-SC31GSHR      PIC 9(009) COMP.
      * Number of bytes of shared storage FREEMAINed by the user task above
      * the 16MB line, in the ECDSA or ESDSA.
         10  DS-PE-STOR-SC31FSHR      PIC 9(009) COMP.
      * Maximum amount (high-water mark) of program storage in use by the
      * user task both above and below the 16MB line.
         10  DS-PE-STOR-PCSTGHWM      PIC 9(009) COMP.
      * Maximum amount (high-water mark) of program storage in use by the
      * user task above the 16MB line, in the extended read-only dynamic
      * storage area (ERDSA).This field is a subset of PC31AHWM (field id 139)
      * that resides in the ERDSA.
         10  DS-PE-STOR-PC31AHWM      PIC 9(009) COMP.
      * Maximum amount (high-water mark) of program storage in use by the user
      * task below the 16MB line. This field is a subset of PCSTGHWM
      * (field id 087) that resides below the 16MB line.
         10  DS-PE-STOR-PC24BHWM      PIC 9(009) COMP.
      * Maximum amount (high-water mark) of program storage in use by the user
      * task above the 16MB line, in the extended CICS dynamic storage area
      *(ECDSA). This field is a subset of PC31AHWM (139) that resides in the
      *ECDSA
         10  DS-PE-STOR-PC31CHWM      PIC 9(009) COMP.
      * Maximum amount (high-water mark) of program storage in use by the user
      *  task below the 16MB line, in the CICS dynamic storage area (CDSA).
      * This field is a subset of PC24BHWM (108) that resides in the CDSA.
         10  DS-PE-STOR-PC24CHWM      PIC 9(009) COMP.
      * Maximum amount (high-water mark) of program storage in use by the user
      * task above the 16MB line, in the extended read-only dynamic
      * storage area (CDSA). This field is a subset of PC24BHWM (108) that
      * resides in the CDSA.
         10  DS-PE-STOR-PC31RHWM      PIC 9(009) COMP.
      * Maximum amount (high-water mark) of program storage in use by the user
      * task below the 16MB line, in the read-only dynamic storage area (RDSA).
      * This field is a subset of PC24BHWM (108) that resides in the RDSA.
         10  DS-PE-STOR-PC24RHWM      PIC 9(009) COMP.
      * Maximum amount (high-water mark) of program storage in use by the
      * user task above the 16MB line, in the extended shared dynamic storage
      * area (ESDSA).This field is a subset of PC31AHWM (139) that resides
      * in the ESDSA.
         10  DS-PE-STOR-PC31SHWM      PIC 9(009) COMP.
      * Maximum amount (high-water mark) of program storage in use by
      * the user task below the 16MB line, in the shared dynamic storage
      * area (SDSA). This field is a subset of PC24BHWM (108) that resides
      * in the SDSA.
         10  DS-PE-STOR-PC24SHWM      PIC 9(009) COMP.
      * Number of file GET requests issued by the user task.
         10  DS-PE-FILE-FCGETCT       PIC 9(009) COMP.
      * Number of file PUT requests issued by the user task.
         10  DS-PE-FILE-FCPUTCT       PIC 9(009) COMP.
      * Number of file browse requests issued by the user task.
      * This number excludes the START and END browse requests.
         10  DS-PE-FILE-FCBRWCT       PIC 9(009) COMP.
      * Number of file ADD requests issued by the user task.
         10  DS-PE-FILE-FCADDCT       PIC 9(009) COMP.
      * Number of file DELETE requests issued by the user task.
         10  DS-PE-FILE-FCDELCT       PIC 9(009) COMP.
      * Total number of file control requests issued by the user task.
      * This number excludes any request for OPEN, CLOSE, ENABLE, or
      * DISABLE of a file.
         10  DS-PE-FILE-FCTOTCT       PIC 9(009) COMP.
      * Number of times the user task invoked file access-method interfaces.
      * This number excludes requests for OPEN and CLOSE.
         10  DS-PE-FILE-FCAMCT        PIC 9(009) COMP.
      * Number of transient data GET requests issued by the user task.
         10  DS-PE-DEST-TDGETCT       PIC 9(009) COMP.
      * Number of transient data PUT requests issued by the user task.
         10  DS-PE-DEST-TDPUTCT       PIC 9(009) COMP.
      * Number of transient data PURGE requests issued by the user task.
         10  DS-PE-DEST-TDPURCT       PIC 9(009) COMP.
      * Total number of transient data requests issued by the user task. This
      * field is the sum of TDGETCT, TDPUTCT, and TDPURCT.
         10  DS-PE-DEST-TDTOTCT       PIC 9(009) COMP.
      * Number of temporary-storage GET requests issued by the user task.
         10  DS-PE-TEMP-TSGETCT       PIC 9(009) COMP.
      * Number of PUT requests to auxiliary temporary storage issued by the
      * user task.
         10  DS-PE-TEMP-TSPUTACT      PIC 9(009) COMP.
      * Number of PUT requests to main temporary storage issued by the user
      * task.
         10  DS-PE-TEMP-TSPUTMCT      PIC 9(009) COMP.
      * Total number of temporary storage requests issued by the user task.
      * This field is the sum of the temporary storage READQ (TSGETCT),
      * WRITEQ AUX (TSPUTACT), WRITEQ MAIN (TSPUTMCT), and DELETEQ requests
      * issued by the user task.
         10  DS-PE-TEMP-TSTOTCT       PIC 9(009) COMP.
      * Number of BMS MAP requests issued by the user task. This field
      * corresponds to the number of RECEIVE MAP requests that did not incur
      * a terminal I/O,and the number of RECEIVE MAP FROM requests.
         10  DS-PE-MAPP-BMSMAPCT      PIC 9(009) COMP.
      * Number of BMS IN requests issued by the user task. This field
      * corresponds to the number of RECEIVE MAP requests that incurred
      * a terminal I/O.
         10  DS-PE-MAPP-BMSINCT       PIC 9(009) COMP.
      * Number of BMS OUT requests issued by the user task. This field
      * corresponds to the number of SEND MAP requests.
         10  DS-PE-MAPP-BMSOUTCT      PIC 9(009) COMP.
      * Total number of BMS requests issued by the user task. This field is
      * the sum of BMS RECEIVE MAP, RECEIVE MAP FROM, SEND MAP, SEND TEXT,
      * and SEND CONTROL requests issued by the user task.
         10  DS-PE-MAPP-BMSTOTCT      PIC 9(009) COMP.
      * Number of program LINK requests issued by the user task, including
      * the link to the first program of the user task. This field does not
      * include program LINK URM (user-replaceable module) requests.
         10  DS-PE-PROG-PCLINKCT      PIC 9(009) COMP.
      * Number of program XCTL requests issued by the user task.
         10  DS-PE-PROG-PCXCTLCT      PIC 9(009) COMP.
      * Number of program LOAD requests issued by the user task.
         10  DS-PE-PROG-PCLOADCT      PIC 9(009) COMP.
      * Number of program LINK URM (user-replaceable module) requests issued
      * by, or on behalf of, the user task.
         10  DS-PE-PROG-PCLURMCT      PIC 9(009) COMP.
      * Number of distributed program link (DPL) requests issued by the
      * user task.
         10  DS-PE-PROG-PCDPLCT       PIC 9(009) COMP.
      * Number of journal write requests issued by the user task.
         10  DS-PE-JOUR-JNLWRTCT      PIC 9(009) COMP.
      * Number of CICS log stream write requests issued by the user task.
         10  DS-PE-JOUR-LOGWRTCT      PIC 9(009) COMP.
      * Number of interval control START or INITIATE requests during the user
      * task.
         10  DS-PE-TASK-ICPUINCT      PIC 9(009) COMP.
      * Total number of Interval Control Start, Cancel, Delay, and Retrieve
      * requests issued by the user task.
         10  DS-PE-TASK-ICTOTCT       PIC 9(009) COMP.
      * Number of SYNCPOINT requests issued during the user task.
         10  DS-PE-SYNC-SPSYNCCT      PIC 9(009) COMP.
      * Number of CICS OO foundation class requests, including the
      * Java API for CICS (JCICS) classes, issued by the user task.
         10  DS-PE-CICS-CFCAPICT      PIC 9(009) COMP.
      * Number of conversations allocated by the user task. This number
      * is incremented for each FEPI ALLOCATE POOL or FEPI CONVERSE POOL.
         10  DS-PE-FEPI-SZALLOCT      PIC 9(009) COMP.
      * Number of FEPI RECEIVE requests made by the user task. This number
      * is also incremented for each FEPI CONVERSE request.
         10  DS-PE-FEPI-SZRCVCT       PIC 9(009) COMP.
      * Number of FEPI SEND requests made by the user task. This number is
      * also incremented for each FEPI CONVERSE request.
         10  DS-PE-FEPI-SZSENDCT      PIC 9(009) COMP.
      * Number of FEPI START requests made by the user task.
         10  DS-PE-FEPI-SZSTRTCT      PIC 9(009) COMP.
      * Number of characters sent through FEPI by the user task.
         10  DS-PE-FEPI-SZCHROUT      PIC 9(009) COMP.
      * Number of characters received through FEPI by the user task.
         10  DS-PE-FEPI-SZCHRIN       PIC 9(009) COMP.
      * Number of times the user task timed out while waiting to allocate
      * a conversation.
         10  DS-PE-FEPI-SZALLCTO      PIC 9(009) COMP.
      * Number of times the user task timed out while waiting to receive data
         10  DS-PE-FEPI-SZRCVTO       PIC 9(009) COMP.
      * Total number of all FEPI API and SPI requests made by the user   data
      * task.                                                            data
         10  DS-PE-FEPI-SZTOTCT       PIC 9(009) COMP.
      * The number of CICS BTS run process, or run activity, requests    data
      * that the user task made in order to execute a process or         data
      * activity synchronously.                                          data
         10  DS-PE-CBTS-BARSYNCT      PIC 9(009) COMP.
      * The number of CICS BTS run process, or run activity, requests    data
      * that the user task made in order to execute a process or         data
      * activity asynchronously.                                         data
         10  DS-PE-CBTS-BARASYCT      PIC 9(009) COMP.
      * The number of CICS BTS link process, or link activity, requests
      * that the user task issued.
         10  DS-PE-CBTS-BALKPACT      PIC 9(009) COMP.
      * The number of CICS BTS define process requests issued by the
      * user task.
         10  DS-PE-CBTS-BADPROCT      PIC 9(009) COMP.
      * The number of CICS BTS define activity requests issued by the
      * user task.
         10  DS-PE-CBTS-BADACTCT      PIC 9(009) COMP.
      * The number of CICS BTS reset process and reset activity requests
      * issued by the user task.
         10  DS-PE-CBTS-BARSPACT      PIC 9(009) COMP.
      * The number of CICS BTS suspend process, or suspend activity,
      * requests issued by the user task.
         10  DS-PE-CBTS-BASUPACT      PIC 9(009) COMP.
      * The number of CICS BTS resume process, or resume activity,
      * requests issued by the user task.
         10  DS-PE-CBTS-BARMPACT      PIC 9(009) COMP.
      * The number of CICS BTS delete activity, cancel process, or
      * cancel activity, requests issued by the user task.
         10  DS-PE-CBTS-BADCPACT      PIC 9(009) COMP.
      * The number of CICS BTS acquire process, or acquire activity,
      * requests issued by the user task.
         10  DS-PE-CBTS-BAACQPCT      PIC 9(009) COMP.
      * Total number of CICS BTS process and activity requests issued by
      * the user task.
         10  DS-PE-CBTS-BATOTPCT      PIC 9(009) COMP.
      * The number of CICS BTS delete, get, or put, container requests
      * for process data containers issued by the user task.
         10  DS-PE-CBTS-BAPRDCCT      PIC 9(009) COMP.
      * The number of CICS BTS delete, get, or put, container requests
      * for current activity data containers issued by the user task.
         10  DS-PE-CBTS-BAACDCCT      PIC 9(009) COMP.
      * Total number of CICS BTS delete, get or put, process container
      * and activity container requests issued by the user task.
         10  DS-PE-CBTS-BATOTCCT      PIC 9(009) COMP.
      * The number of CICS BTS retrieve-reattach event requests issued
      * by the user task.
         10  DS-PE-CBTS-BARATECT      PIC 9(009) COMP.
      * The number of CICS BTS define-input event requests issued by the
      * user task.
         10  DS-PE-CBTS-BADFIECT      PIC 9(009) COMP.
      * The number of CICS BTS DEFINE TIMER EVENT, CHECK TIMER EVENT,
      * DELETE TIMER EVENT, and FORCE TIMER EVENT requests issued by the
      * user task.
         10  DS-PE-CBTS-BATIAECT      PIC 9(009) COMP.
      * Total number of CICS BTS event-related requests issued by the
      * user task.
         10  DS-PE-CBTS-BATOTECT      PIC 9(009) COMP.
      * The number of CICS Web interface RECEIVE requests issued by the
      * user task.
         10  DS-PE-WEBB-WBRCVCT       PIC 9(009) COMP.
      * The number of characters received by the CICS Web interface
      * RECEIVE requests issued by the user task.
         10  DS-PE-WEBB-WBCHRIN       PIC 9(009) COMP.
      * The number of CICS Web interface SEND requests issued by the
      * user task.
         10  DS-PE-WEBB-WBSENDCT      PIC 9(009) COMP.
      * The number of characters sent by the CICS Web interface SEND
      * requests issued by the user task.
         10  DS-PE-WEBB-WBCHROUT      PIC 9(009) COMP.
      * The total number of CICS Web interface requests issued by the
      * user task.
         10  DS-PE-WEBB-WBTOTCT       PIC 9(009) COMP.
      * The number of reads from the repository in shared temporary
      * storage issued by the user task.
         10  DS-PE-WEBB-WBREPRCT      PIC 9(009) COMP.
      * The number of writes to the repository in shared temporary
      * storage issued by the user task
         10  DS-PE-WEBB-WBREPWCT      PIC 9(009) COMP.
      * The number of CICS Web support EXTRACT requests issued by the
      * user task.
         10  DS-PE-WEBB-WBEXTRCT      PIC 9(009) COMP.
      * The number of CICS Web support BROWSE httpheader and formfield
      * requests (STARTBROWSE, READNEXT, and ENDBROWSE) issued by the
      * user task.
         10  DS-PE-WEBB-WBBRWCT       PIC 9(009) COMP.
      * The number of CICS Web support READ httpheader and formfield
      * requests issued by the user task.
         10  DS-PE-WEBB-WBREADCT      PIC 9(009) COMP.
      * The number of CICS Web support WRITE httpheader requests issued
      * by the user task.
         10  DS-PE-WEBB-WBWRITCT      PIC 9(009) COMP.
      * The number of document handler CREATE requests issued by the
      * user task.
         10  DS-PE-DOCH-DHCRECT       PIC 9(009) COMP.
      * The number of document handler INSERT requests issued by the
      * user task.
         10  DS-PE-DOCH-DHINSCT       PIC 9(009) COMP.
      * The number of document handler SET requests issued by the user
      * task.
         10  DS-PE-DOCH-DHSETCT       PIC 9(009) COMP.
      * The number of document handler RETRIEVE requests issued by the
      * user task.
         10  DS-PE-DOCH-DHRETCT       PIC 9(009) COMP.
      * The total number of document handler requests issued by the user
      * task.
         10  DS-PE-DOCH-DHTOTCT       PIC 9(009) COMP.
      * The total length of all documents created by the user task.
         10  DS-PE-DOCH-DHTOTDCL      PIC 9(009) COMP.
      * The number of bytes encrypted by the secure sockets layer for
      * the user task.
         10  DS-PE-SOCK-SOBYENCT      PIC 9(009) COMP.
      * The number of bytes decrypted by the secure sockets layer for
      * the user task.
         10  DS-PE-SOCK-SOBYDECT      PIC 9(009) COMP.
      * The number of bytes decrypted by the secure sockets layer for
      * the user task.
         10  DS-PE-SOCK-SOEXTRCT      PIC 9(009) COMP.
      * The number of EXTRACT TCPIP and EXTRACT CERTIFICATE requests
      * issued by the user task.
         10  DS-PE-SOCK-SOCNPSCT      PIC 9(009) COMP.
      * The total number of requests made by the user task to create a
      * persistent outbound socket.
         10  DS-PE-SOCK-SOCPSCT       PIC 9(009) COMP.
      * The peak number of non-persistent outbound sockets owned by the
      * user task.
         10  DS-PE-SOCK-SONPSHWM      PIC 9(009) COMP.
      * The peak number of persistent outbound sockets owned by the user
      * task.
         10  DS-PE-SOCK-SOPSHWM       PIC 9(009) COMP.
      * The total number of receive requests issued for outbound sockets
      * (persistent and non-persistent) by the user task.
         10  DS-PE-SOCK-SORCVCT       PIC 9(009) COMP.
      * The total number of bytes received on outbound sockets by the
      * user task
         10  DS-PE-SOCK-SOCHRIN       PIC 9(009) COMP.
      * The total number of send requests issued for outbound sockets
      * (persistent and non-persistent) by the user task.
         10  DS-PE-SOCK-SOSENDCT      PIC 9(009) COMP.
      * The total number of bytes sent on outbound sockets by the user
      * task.
         10  DS-PE-SOCK-SOCHROUT      PIC 9(009) COMP.
      * The total number of socket requests issued by the user task.
         10  DS-PE-SOCK-SOTOTCT       PIC 9(009) COMP.
      * The number of inbound socket RECEIVE requests issued by the user
      * task.
         10  DS-PE-SOCK-SOMSGIN1      PIC 9(009) COMP.
      * The number of characters received by inbound socket RECEIVE
      * requests issued by the user task.
         10  DS-PE-SOCK-SOCHRIN1      PIC 9(009) COMP.
      * The number of inbound socket SEND requests issued by the user
      * task.
         10  DS-PE-SOCK-SOMSGOU1      PIC 9(009) COMP.
      *  The number of characters sent by inbound socket SEND requests
      * issued by the user task.
         10  DS-PE-SOCK-SOCHROU1      PIC 9(009) COMP.
      * The number of IMS (DBCTL) requests issued by the user task.
         10  DS-PE-DATA-IMSREQCT      PIC 9(009) COMP.
      * The total number of DB2 EXEC SQL and Instrumentation Facility
      * Interface (IFI) requests issued by the user task.
         10  DS-PE-DATA-DB2REQCT      PIC 9(009) COMP.
      * The total number of CICS change-TCB modes issued on behalf of
      * the user task.
         10  DS-PE-TASK-CHMODECT      PIC 9(009) COMP.
      * The number of CICS TCBs attached by or on behalf of the user
      * task.
         10  DS-PE-TASK-TCBATTCT      PIC 9(009) COMP.
      * Total elapsed time during which the user task was dispatched
      * on each CICS TCB under which the task executed. This can include
      * TCB modes QRRO, CO, FO, SZ ,RP SL,SO, H8, J8, L8, S8 and D2.
      * For moreinformation, see "Clocks and time stamps" in topic
      * 2.3.6.1.
         10  DS-PE-TASK-USRDISPT-P1   PIC 9(009) COMP.
         10  DS-PE-TASK-USRDISPT-P2   PIC 9(009) COMP.
      * Processor time for which the user task was dispatched on each
      * CICS TCB under which the task executed. This can include TCB
      * modes QR,RO, CO,FO, SZ, RP, SL, SO, H8, J8, L8, S8 and D2. For
      * more information see "Clocks and time stamps" in topic 2.3.6.1
      *
         10  DS-PE-TASK-USRCPUT-P1   PIC 9(009) COMP.
         10  DS-PE-TASK-USRCPUT-P2   PIC 9(009) COMP.
      *
      * Total elapsed wait time for which the user task was suspended by
      * the dispatcher. This includes:
      * " The elapsed time waiting for the first dispatch. This also
      * includes any delay incurred because of the limits set for this
      * transaction's transaction class (if any) or by the system
      * parameter MXT being reached.
      * " The task suspend (wait) time.
      * " The elapsed time waiting for redispatch after a suspended task
      * has been resumed.
      * For more information, see "A note about wait (suspend) times" in
      * topic 2.3.7.3
      *
         10  DS-PE-TASK-SUSPTIME-P1   PIC 9(009) COMP.
         10  DS-PE-TASK-SUSPTIME-P2   PIC 9(009) COMP.
      * Elapsed time for which the user task waited for redispatch. This
      * is the aggregate of the wait times between each event completion
      * and user-task redispatch.
      * Note: This field does not include the elapsed time spent waiting
      * for first dispatch. This field is a component of the task
      * suspend time, SUSPTIME (014), field.
      *
         10  DS-PE-TASK-DISPWTT-P1   PIC 9(009) COMP.
         10  DS-PE-TASK-DISPWTT-P2   PIC 9(009) COMP.
      * The elapsed time for which the user task was dispatched on the
      * CICS QR TCB. For more information, see "Clocks and time stamps"
      * in topic 2.3.6.1.
         10  DS-PE-TASK-QRDISPT-P1   PIC 9(009) COMP.
         10  DS-PE-TASK-QRDISPT-P2   PIC 9(009) COMP.
      * The processor time for which the user task was dispatched on the
      * CICS QR TCB. For more information, see "Clocks and time stamps"
      * in topic 2.3.6.1.
      *
         10  DS-PE-TASK-QRCPUT-P1   PIC 9(009) COMP.
         10  DS-PE-TASK-QRCPUT-P2   PIC 9(009) COMP.
      * The processor time for which the user task was dispatched on
      * each CICS TCB (RO, CO, FO, SZ if FEPI is active, and RP if the
      * ONC/RPC or CICS WEB interface feature is installed and active.
      * Modes SO  and SL are used only if TCPIP=YES is specified as a
      * system initialization parameter. Mode D2 is used only in CICS
      * Transaction
      * Server for z/OS Version 2 Release 2 or later, when CICS is
      * connected to DB2 Version 6 or later, to terminate DB2 protected
      * threads). For more information, see "Clocks and time stamps" in
      * topic 2.3.6.1.
      *
         10  DS-PE-TASK-MSDISPT-P1   PIC 9(009) COMP.
         10  DS-PE-TASK-MSDISPT-P2   PIC 9(009) COMP.
      *  The processor time for which the user task was dispatched on
      * each CICS TCB (RO, CO, FO, SZ if FEPI is active, and RP if the
      * ONC/RPC or CICS WEB interface feature is installed and active.
      * Modes SO and SL are used only if TCPIP=YES is specified as a
      * system  initialization parameter. Mode D2 is used only in CICS
      * Transaction
      * Server for z/OS Version 2 Release 2 or later, when CICS is
      * connected to DB2 Version 6 or later, to terminate DB2 protected
      * threads). For more information, see "Clocks and time stamps" in
      * topic 2.3.6.1
         10  DS-PE-TASK-MSCPUT-P1   PIC 9(009) COMP.
         10  DS-PE-TASK-MSCPUT-P2   PIC 9(009) COMP.
      * The elapsed time during which the user task was dispatched by
      * the CICS dispatcher on the CICS RO mode TCB. The CICS RO mode
      * TCB is used for opening and closing CICS data sets, loading
      * programs,issuing RACF calls, and other functions.
      *
         10  DS-PE-TASK-RODISPT-P1   PIC 9(009) COMP.
         10  DS-PE-TASK-RODISPT-P2   PIC 9(009) COMP.
      *  The processor time during which the user task was dispatched by
      *  the CICS dispatcher on the CICS RO mode TCB. The CICS RO mode
      *  TCB is used for opening and closing CICS data sets, loading
      *  programs,issuing RACF calls, and other functions.
      *  Note: This field is a component of the task CPU time field,
      *  USRCPUT (group name: DFHTASK, field id: 008) and the task
      *  miscellaneous TCB CPU time field, MSCPUT (group name:
      *  DFHTASK, field id: 258).
      *
         10  DS-PE-TASK-ROCPUT-P1   PIC 9(009) COMP.
         10  DS-PE-TASK-ROCPUT-P2   PIC 9(009) COMP.
      * The total elapsed time during which the user task was dispatched by the
      * CICS dispatcher on a CICS Key 8 mode TCB:
      * " When a transaction invokes an application program that has been
      * defined to use Java hot-pooling, it is allocated a CICS H8 mode TCB, and
      * dispatched on that TCB.
      * "  When a transaction invokes a task-related user exit program
      *  that has been enabled with the OPENAPI option, it is allocated
      *  a CICS L8 mode TCB. This includes the CICS DB2 adaptor, when
      *  CICS connects to DB2 Version 6 or later. The TCB remains
      *  associated with the task until the transaction is detached.
      * " When a transaction invokes a JVM application program, it is allocated
      * a CICS J8 mode TCB, and dispatched on that TCB. The TCB remains
      * associated with the task until the transaction is detached.
      * " When a transaction is using the secure sockets layer (SSL) during
      * client certification negotiation, it is allocated a CICS S8 mode TCB,
      * and dispatched on that TCB. The TCB remains associated with the task
      * until the secure socket is closed, which typically occurs during task
      * detach processing.
      * Note: This field is a component of the task dispatch time field,
      * USRDISPT (field id 007 in group DFHTASK).
      *
         10  DS-PE-TASK-KY8DISPT-P1   PIC 9(009) COMP.
         10  DS-PE-TASK-KY8DISPT-P2   PIC 9(009) COMP.
      * The processor time during which the user task was dispatched by the CICS
      * dispatcher on a CICS Key 8 mode TCB:
      * " When a transaction invokes an application program that has been
      * defined to use Java hot-pooling, it is allocated a CICS H8 mode TCB, and
      * dispatched on that TCB.
      * "  When a transaction invokes a task-related user exit program
      *  that has been enabled with the OPENAPI option, it is allocated
      *  a CICS L8 mode TCB. This includes the CICS DB2 adaptor, when
      *  CICS connects to DB2 Version 6 or later. The TCB remains
      *  associated with the task until the transaction is detached.
      * " When a transaction invokes a JVM application program, it is allocated
      * a CICS J8 mode TCB, and dispatched on that TCB. The TCB remains
      * associated with the task until the transaction is detached.
      * " When a transaction is using the secure sockets layer (SSL) during
      * client certification negotiation, it is allocated a CICS S8 mode TCB,
      * and dispatched on that TCB. The TCB remains associated with the task
      * until the secure socket is closed, which typically occurs during task
      * detach processing.
      * Note: This field is a component of the task CPU time field,
      * USRCPUT (field id 008 in group DFHTASK).
      *
         10  DS-PE-TASK-KY8CPUT-P1   PIC 9(009) COMP.
         10  DS-PE-TASK-KY8CPUT-P2   PIC 9(009) COMP.
      *  The processor time during which the user task was dispatched by
      *  the CICS dispatcher domain on a CICS L8 mode TCB. When a
      *  transaction invokes a task-related user exit program that has been
      *  enabled with the OPENAPI option (including the CICS DB2 adaptor,
      *  when CICS connects to DB2 Version 6 or later), it is allocated and
      *  uses a CICS L8 mode TCB. Once a task has been allocated an L8 mode
      *  TCB, that same TCB remains associated with the task until the
      *  transaction is detached. For more information on DB2 accounting
      *  and monitoring, see CICS DB2 Guide. For more information on this
      *  field, see "Clocks and time stamps" in topic 2.3.6.1.
      *
         10  DS-PE-TASK-L8CPUT-P1   PIC 9(009) COMP.
         10  DS-PE-TASK-L8CPUT-P2   PIC 9(009) COMP.
      *  The processor time during which the user task was dispatched by
      *  the CICS dispatcher domain on a CICS J8 mode TCB. When a
      *  transaction invokes a CICS Java Virtual Machine (JVM) application
      *  program, it is allocated and uses a CICS J8 mode TCB . Once a task
      *  has been allocated a J8 mode TCB, that same TCB remains associated
      *  with the task until the transaction is detached. For more
      *  information, see "Clocks and time stamps" in topic 2.3.6.1.
      *
         10  DS-PE-TASK-J8CPUT-P1   PIC 9(009) COMP.
         10  DS-PE-TASK-J8CPUT-P2   PIC 9(009) COMP.
      *  The processor time during which the user task was dispatched by
      *  the CICS dispatcher domain on a CICS S8 mode TCB. A transaction is
      *  allocated a CICS S8 mode TCB when it is using the secure sockets
      *  layer (SSL) during client certification negotiation. The S8 mode
      *  TCB remains associated with the same task until the secure socket
      *  is closed, which normally occurs during task detach processing.
      *  For more information, see "Clocks and time stamps" in
      *  topic 2.3.6.1, and "A note about JVM elapsed time and suspend
      *  time" in topic 2.3.7.6.
         10  DS-PE-TASK-S8CPUT-P1   PIC 9(009) COMP.
         10  DS-PE-TASK-S8CPUT-P2   PIC 9(009) COMP.
      * The elapsed time for which the user task waited for redispatch on the
      * CICS QR TCB. This is the aggregate of the wait times between each event
      * completion. and user-task redispatch.
      * Note: This field does not include the elapsed time spent waiting for the
      * first dispatch. The QRMODDLY field is a component of the task suspend
      * time, SUSPTIME (014), field, and also the redispatch wait, DIS
      *
         10  DS-PE-TASK-QRMODDLY-P1   PIC 9(009) COMP.
         10  DS-PE-TASK-QRMODDLY-P2   PIC 9(009) COMP.
      * The elapsed time in which the user task waited to obtain a CICS
      *  open TCB, because the region had reached the limit set by the
      *  system parameter, MAXOPENTCBS. In CICS Transaction Server for z/OS
      *  Version 2 Release 2 or later, this applies to L8 mode open TCBs
      *  only. L8 mode open TCBs are used by task-related user exits that
      *  are enabled with the OPENAPI option. This includes the CICS DB2
      *  adaptor, when CICS connects to DB2 Version 6 or later.
      *
      *  For more information, see "Clocks and time stamps" in
      *  topic 2.3.6.1, and "A note about wait (suspend) times" in
      *  topic 2.3.7.3.
      *
      *  Note: This field is a component of the task suspend time,
      *  SUSPTIME (014), field.
      *
         10  DS-PE-TASK-MAXOTDLY-P1   PIC 9(009) COMP.
         10  DS-PE-TASK-MAXOTDLY-P2   PIC 9(009) COMP.
      * The elapsed time in which the user task waited to obtain a CICS
      *  JVM TCB (J8 mode), because the CICS system had reached the limit
      *  set by the system parameter, MAXJVMTCBS. The J8 mode open TCBs are
      *  used exclusively by Java programs defined with JVM(YES). For more
      *  information, see "A note about wait (suspend) times" in
      *  topic 2.3.7.3.
      *
      *  Note: This field is a component of the task suspend time field,
      *  SUSPTIME (group name: DFHTASK, field id: 014).
      *
         10  DS-PE-TASK-MAXJTDLY-P1   PIC 9(009) COMP.
         10  DS-PE-TASK-MAXJTDLY-P2   PIC 9(009) COMP.
      *  The elapsed time in which the user task waited to obtain a CICS
      *  Hotpooling TCB (H8 mode), because the CICS system had reached the
      *  limit set by the system parameter, MAXHPTCBS. The H8 mode open
      *  TCBs are used exclusively by HPJ-compiled Java programs defined
      *  with HOTPOOL(YES). For more information, see "A note about wait
      *  (suspend) times" in topic 2.3.7.3.
      *
      *  Note: This field is a component of the task suspend time field,
      *  SUSPTIME (group name: DFHTASK, field id: 014).
      *
         10  DS-PE-TASK-MAXHTDLY-P1   PIC 9(009) COMP.
         10  DS-PE-TASK-MAXHTDLY-P2   PIC 9(009) COMP.
      * Accumulated data for exception conditions. The 32-bit clock contains the
      * total elapsed time for which the user waited on exception conditions.
      * The 24-bit period count equals the number of exception conditions that
      * have occurred for this task. For more information, see "Exception class
      * data" in topic 2.3.9
      * Note: The performance class data field 'exception wait time' will be
      * updated when exception conditions are encountered even when the
      * exception class is inactive.
      *
         10  DS-PE-CICS-EXWTTIME-P1   PIC 9(009) COMP.
         10  DS-PE-CICS-EXWTTIME-P2   PIC 9(009) COMP.
      * Elapsed time for which the user task waited for input from the terminal
      * operator, after issuing a RECEIVE request. For more information, see
      * "Clocks and time stamps" in topic 2.3.6.1, and "A note about wait
      * (suspend) times" in topic 2.3.7.3.
      * Note: This field is a component of the task suspend time, SUSPTIME
      * (014), field.
         10  DS-PE-TERM-TCIOWTT-P1   PIC 9(009) COMP.
         10  DS-PE-TERM-TCIOWTT-P2   PIC 9(009) COMP.
      * Elapsed time in which the user task waited for file I/O. For more
      * information, see "Clocks and time stamps" in topic 2.3.6.1, and "A note
      * about wait (suspend) times" in topic 2.3.7.3.
      * Note: This field is a component of the task suspend time, SUSPTIME (014)
      * field.
      *
         10  DS-PE-FILE-FCIOWTT-P1   PIC 9(009) COMP.
         10  DS-PE-FILE-FCIOWTT-P2   PIC 9(009) COMP.
      * Elapsed time for which the user task waited for journal (logstream) I/O.
      * For more information, see "Clocks and time stamps" in topic 2.3.6.1, and
      * "A note about wait (suspend) times" in topic 2.3.7.3.
      * Note: This field is a component of the task suspend time, SUSPTIME (014)
      * field.
      *
         10  DS-PE-JOUR-JCIOWTT-P1   PIC 9(009) COMP.
         10  DS-PE-JOUR-JCIOWTT-P2   PIC 9(009) COMP.
      * Elapsed time for which the user task waited for VSAM temporary storage
      * I/O. For more information see "Clocks and time stamps" in topic 2.3.6.1,
      * and "A note about wait (suspend) times" in topic 2.3.7.3.
      * Note: This field is a component of the task suspend time, SUSPTIME
      * (014), field.
      *
         10  DS-PE-TEMP-TSIOWTT-P1   PIC 9(009) COMP.
         10  DS-PE-TEMP-TSIOWTT-P2   PIC 9(009) COMP.
      * Elapsed time for which the user task waited for control at this end of
      * an MRO link. For more information, see "Clocks and time stamps" in topic
      * 2.3.6.1, and "A note about wait (suspend) times" in topic 2.3.7.3.
      * Note: This field is a component of the task suspend time, SUSPTIME
      * (014), field
         10  DS-PE-TERM-IRIOWTT-P1   PIC 9(009) COMP.
         10  DS-PE-TERM-IRIOWTT-P2   PIC 9(009) COMP.
      * Elapsed time in which the user waited for VSAM transient data I/O. For
      * more information see "Clocks and time stamps" in topic 2.3.6.1, and "A
      * note about wait (suspend) times" in topic 2.3.7.3. This field is a
      * subset of the task suspend time, SUSPTIME (014) field.
      *
         10  DS-PE-DEST-TDIOWTT-P1   PIC 9(009) COMP.
         10  DS-PE-DEST-TDIOWTT-P2   PIC 9(009) COMP.
      * Elapsed time in which the user task waited for program library
      * (DFHRPL) fetches. Only fetches for programs with installed
      * program definitions or autoinstalled as a result of application
      * requests are included in this figure. However, installed
      * programs residing in the LPA are not included (because they do
      * not incur a physical fetch from a library). For more information
      * about program load time, see "Clocks and time stamps" in topic
      * 2.3.6.1, and "A note about program load time" in topic 2.3.7.4.
      *
         10  DS-PE-PROG-PCLOADTM-P1   PIC 9(009) COMP.
         10  DS-PE-PROG-PCLOADTM-P2   PIC 9(009) COMP.
      * The elapsed time waiting for first dispatch.
      * Note: This field is a component of the task suspend time, SUSPTIME
      * (014), field. For more information, see "Clocks and time stamps" in
      * topic 2.3.6.1.
      *
         10  DS-PE-TASK-DSPDELAY-P1   PIC 9(009) COMP.
         10  DS-PE-TASK-DSPDELAY-P2   PIC 9(009) COMP.
      * The elapsed time waiting for first dispatch which was delayed because of
      * the limits set for this transaction's transaction class, TCLSNAME (166),
      * being reached. For more information, see "Clocks and time stamps" in
      * topic 2.3.6.1.
      * Note: This field is a subset of the first dispatch delay, DSPDELAY
      * (125), field.
         10  DS-PE-TASK-TCLDELAY-P1   PIC 9(009) COMP.
         10  DS-PE-TASK-TCLDELAY-P2   PIC 9(009) COMP.
      * The elapsed time waiting for first dispatch which was delayed because of
      * the limits set by the system parameter, MXT, being reached.
      * Note: The field is a subset of the first dispatch delay, DSPDELAY (125),
      * field.
      *
         10  DS-PE-TASK-MXTDELAY-P1   PIC 9(009) COMP.
         10  DS-PE-TASK-MXTDELAY-P2   PIC 9(009) COMP.
      * The elapsed time waiting for a CICS task control local enqueue. For more
      * information, see "Clocks and time stamps" in topic 2.3.6.1.
      * Note: This field is a subset of the task suspend time, SUSPTIME (014),
      * field.
      *
         10  DS-PE-TASK-ENQDELAY-P1   PIC 9(009) COMP.
         10  DS-PE-TASK-ENQDELAY-P2   PIC 9(009) COMP.
      * The elapsed time waiting for a CICS task control global enqueue. For
      * more information, see "Clocks and time stamps" in topic 2.3.6.1.
      * Note: This field is a subset of the task suspend time, SUSPTIME (014),
      * field.
      *
         10  DS-PE-TASK-GNQDELAY-P1   PIC 9(009) COMP.
         10  DS-PE-TASK-GNQDELAY-P2   PIC 9(009) COMP.
      * The elapsed time for which the user task waited for I/O on a LUTYPE6.1
      * connection or session. This time also includes the waits incurred for
      * conversations across LUTYPE6.1 connections, but not the waits incurred
      * due to LUTYPE6.1 syncpoint flows. For more information see "Clocks and
      * time stamps" in topic 2.3.6.1, and "A note about wait (suspend) times"
      * in topic 2.3.7.3.
      * Note: This field is a component of the task suspend time, SUSPTIME
      * (014), field.
      *
         10  DS-PE-TERM-LU61WTT-P1   PIC 9(009) COMP.
         10  DS-PE-TERM-LU61WTT-P2   PIC 9(009) COMP.
      *  The elapsed time for which the user task waited for I/O on a LUTYPE6.1
      *  connection or session. This time also includes the waits incurred for
      *  conversations across LUTYPE6.1 connections, but not the waits incurred
      *  due to LUTYPE6.1 syncpoint flows. For more information see "Clocks and
      *  time stamps" in topic 2.3.6.1, and "A note about wait (suspend) times"
      *  in topic 2.3.7.3.
      *  Note: This field is a component of the task suspend time, SUSPTIME
      *  (014), field.
      *
         10  DS-PE-TERM-LU62WTT-P1   PIC 9(009) COMP.
         10  DS-PE-TERM-LU62WTT-P2   PIC 9(009) COMP.
      * Elapsed time in which the user task waited for all FEPI services. For
      * more information see "Clocks and time stamps" in topic 2.3.6.1, and "A
      * note about wait (suspend) times" in topic 2.3.7.3.
      * Note: This field is a component of the task suspend time, SUSPTIME (014)
      * field.
         10  DS-PE-FEPI-SZWAIT-P1   PIC 9(009) COMP.
         10  DS-PE-FEPI-SZWAIT-P2   PIC 9(009) COMP.
      * The total elapsed time spent in the CICS Resource Manager Interface
      * (RMI). For more information, see "Clocks and time stamps" in topic
      * 2.3.6.1, "A note about wait (suspend) times" in topic 2.3.7.3, and
      * Figure 8 in topic 2.3.7.5.
         10  DS-PE-TASK-RMITIME-P1   PIC 9(009) COMP.
         10  DS-PE-TASK-RMITIME-P2   PIC 9(009) COMP.
      * The total elapsed time the task was suspended by the CICS dispatcher
      * while in the CICS Resource Manager Interface (RMI). For more
      * information, see "Clocks and time stamps" in topic 2.3.6.1, "A note
      * about wait (suspend) times" in topic 2.3.7.3, and Figure 8 in topic
      * 2.3.7.5.
      * Note: The field is a subset of the task suspend time, SUSPTIME (014),
      * field and also the RMITIME (170) field.
         10  DS-PE-TASK-RMISUSP-P1   PIC 9(009) COMP.
         10  DS-PE-TASK-RMISUSP-P2   PIC 9(009) COMP.
      * Total elapsed time for which the user task was dispatched and was
      * processing Syncpoint requests.
         10  DS-PE-SYNC-SYNCTIME-P1   PIC 9(009) COMP.
         10  DS-PE-SYNC-SYNCTIME-P2   PIC 9(009) COMP.
      * Elapsed time in which the user task waited for RLS file I/O. For more
      * information, see "Clocks and time stamps" in topic 2.3.6.1, and "A note
      * about wait (suspend) times" in topic 2.3.7.3.
      * Note: This field is a component of the task suspend time, SUSPTIME (014)
      * field. .
         10  DS-PE-FILE-RLSWAIT-P1   PIC 9(009) COMP.
         10  DS-PE-FILE-RLSWAIT-P2   PIC 9(009) COMP.
      * The RLS File Request CPU (SRB) time field (RLSCPUT) is the SRB CPU time
      * this transaction spent processing RLS file requests. This field should
      * be added to the transaction CPU time field (USRCPUT) when considering
      * the measurement of the total CPU time consumed by a transaction. Also,
      * this field cannot be considered a subset of any other single CMF field
      * (including RLSWAIT). This is because the RLS field requests execute
      * asynchronously under an MVS SRB which can be running in parallel with
      * the requesting transaction. It is also possible for the SRB to complete
      * its processing before the requesting transaction waits for the RLS file
      * request to complete.
      * Note: This clock field could contain a CPU time of zero with a count of
      * greater than zero. This is because the CMF timing granularity is
      * measured in 16 microsecond units and the RLS file request(s) may
      * complete in less than that time unit.
         10  DS-PE-FILE-RLSCPUT-P1   PIC 9(009) COMP.
         10  DS-PE-FILE-RLSCPUT-P2   PIC 9(009) COMP.
      * The elapsed time that the user task waited to acquire a lock on a
      * resource. A user task cannot explicitly acquire a lock on a resource,
      * but many CICS modules lock resources on behalf of user tasks using the
      * CICS lock manager (LM) domain.
      * For more information about CICS lock manager, see the CICS Problem
      * Determination Guide.
      * For information about times, see "Clocks and time stamps" in topic
      * 2.3.6.1, and "A note about wait (suspend) times" in topic 2.3.7.3.
      * Note: This field is a component of the task suspend time, SUSPTIME
      * (014), field.
         10  DS-PE-TASK-LMDELAY-P1   PIC 9(009) COMP.
         10  DS-PE-TASK-LMDELAY-P2   PIC 9(009) COMP.
      * The elapsed time that the user task waited for one or more ECBs, passed
      * to CICS by the user task using the EXEC CICS WAIT EXTERNAL ECBLIST
      * command, to be MVS POSTed. The user task can wait on one or more ECBs.
      * If it waits on more than one, it is dispatchable as soon as one of the
      * ECBs is posted. For more information, see "Clocks and time stamps" in
      * topic 2.3.6.1, and "A note about wait (suspend) times" in topic 2.3.7.3.
      * Note: This field is a component of the task suspend time, (SUSPTIME)
      * (014), field.
         10  DS-PE-TASK-WTEXWAIT-P1   PIC 9(009) COMP.
         10  DS-PE-TASK-WTEXWAIT-P2   PIC 9(009) COMP.
      * The elapsed time the user task waited for:
      * " One or more ECBs, passed to CICS by the user task using the EXEC CICS
      * WAITCICS ECBLIST command, to be MVS POSTed. The user task can wait on
      * one or more ECBs. If it waits on more than one, it is dispatchable as
      * soon as one of the ECBs is posted.
      * " Completion of an event initiated by the same or by another user task.
      * The event would normally be the posting, at the expiration time, of a
      * timer-event control area provided in response to an EXEC CICS POST
      * command. The EXEC CICS WAIT EVENT command provides a method of directly
      * giving up control to some other task until the event being waited on is
      * completed.
      * For more information, see "Clocks and time stamps" in topic 2.3.6.1, and
      * "A note about wait (suspend) times" in topic 2.3.7.3.
      * Note: This field is a component of the task suspend time, SUSPTIME
      * (014), field.
         10  DS-PE-TASK-WTCEWAIT-P1   PIC 9(009) COMP.
         10  DS-PE-TASK-WTCEWAIT-P2   PIC 9(009) COMP.
      * The elapsed time the user task waited as a result of issuing either:
      * " An interval control EXEC CICS DELAY command for a specified time
      * interval, or
      * " An interval control EXEC CICS DELAY command for a specified time of
      * day to expire, or
      * " An interval control EXEC CICS RETRIEVE command with the WAIT option
      * specified. For more information, see "Clocks and time stamps" in topic
      * 2.3.6.1, and "A note about wait (suspend) times" in topic 2.3.7.3.
         10  DS-PE-TASK-ICDELAY-P1   PIC 9(009) COMP.
         10  DS-PE-TASK-ICDELAY-P2   PIC 9(009) COMP.
      * The elapsed time the user task waited as a result of giving up control
      * to another task. A user task can give up control in many ways. Some
      * examples are application programs that use one or more of the following
      * EXEC CICS API or SPI commands:
      * " Using the EXEC CICS SUSPEND command. This command causes the issuing
      * task to relinquish control to another task of higher or equal
      * dispatching priority. Control is returned to this task as soon as no
      * other task of a higher or equal priority is ready to be dispatched.
      * " Using the EXEC CICS CHANGE TASK PRIORITY command. This command
      * immediately changes the priority of the issuing task and causes the task
      * to give up control in order for it to be dispatched at its new priority.
      * The task is not redispatched until tasks of higher or equal priority,
      * and that are also dispatchable, have been dispatched.
      * " Using the EXEC CICS DELAY command with INTERVAL (0). This command
      * causes the issuing task to relinquish control to another task of higher
      * or equal dispatching priority. Control is returned to this task as soon
      * as no other task of a higher or equal priority is ready to be
      * dispatched.
      * " Using the EXEC CICS POST command requesting notification that a
      * specified time has expired. This command causes the issuing task to
      * relinquish control to give CICS the opportunity to post the time-event
      * control area.
      * " Using the EXEC CICS PERFORM RESETTIME command to synchronize the CICS
      * date and time with the MVS system date and time of day.
      * " Using the EXEC CICS START TRANSID command with the ATTACH option.
      * For more information, see "Clocks and time stamps" in topic 2.3.6.1, and
      * "A note about wait (suspend) times" in topic 2.3.7.3.
      * Note: This field is a component of the task suspend time, SUSPTIME
      * (014), field.
         10  DS-PE-TASK-GVUPWAIT-P1   PIC 9(009) COMP.
         10  DS-PE-TASK-GVUPWAIT-P2   PIC 9(009) COMP.
      * Elapsed time that the user task waited for an asynchronous shared
      * temporary storage request to a temporary storage data server to
      * complete For more information, see "Clocks and time stamps"
      * in topic 2.3.6.1, and "A note about wait (suspend) times" in
      * topic 2.3.7.3.
         10  DS-PE-TEMP-TSSHWAIT-P1   PIC 9(009) COMP.
         10  DS-PE-TEMP-TSSHWAIT-P2   PIC 9(009) COMP.
      * Elapsed time in which the user task waited for a data table access
      * request to the coupling facility data table server to complete. For more
      * information, see "Clocks and time stamps" in topic 2.3.6.1, and "A note
      * about wait (suspend) times" in topic 2.3.7.3.
      * Note: This field is a component of the task suspend time, SUSPTIME (014)
      * field. .
         10  DS-PE-FILE-CFDTWAIT-P1   PIC 9(009) COMP.
         10  DS-PE-FILE-CFDTWAIT-P2   PIC 9(009) COMP.
      * Total elapsed time in which the user task waited for syncpoint or
      * resynchronization processing using the Coupling Facility data tables
      * server to complete.
      * Note: This field is a component of the task suspend time, SUSPTIME
      * (O14), field.
         10  DS-PE-SYNC-SRVSYWTT-P1   PIC 9(009) COMP.
         10  DS-PE-SYNC-SRVSYWTT-P2   PIC 9(009) COMP.
      * The elapsed time in which the user task waited indoubt using resource
      * recovery services for EXCI.
      * For more information, see "Clocks and time stamps" in topic 2.3.6.1, and
      * "A note about wait (suspend) times" in topic 2.3.7.3.
      * Note: This field is a component of the task suspend time, SUSPTIME
      * (014), field.
         10  DS-PE-TASK-RRMSWAIT-P1   PIC 9(009) COMP.
         10  DS-PE-TASK-RRMSWAIT-P2   PIC 9(009) COMP.
      * The elapsed time in which the user task waited for completion of a
      * transaction that executed as a result of the user task issuing a CICS
      * BTS run process, or run activity, request to execute a process, or
      * activity, synchronously.
      * For more information, see "Clocks and time stamps" in topic 2.3.6.1, and
      * "A note about wait (suspend) times" in topic 2.3.7.3.
      * Note: This field is a component of the task suspend time, SUSPTIME
      * (014), field.
         10  DS-PE-TASK-RUNTRWTT-P1   PIC 9(009) COMP.
         10  DS-PE-TASK-RUNTRWTT-P2   PIC 9(009) COMP.
      * The elapsed time in which the user task waited for a syncpoint request
      * to be issued by it's parent transaction. The user task was executing as
      * a result of the parent task issuing a CICS BTS run-process or
      * run-activity request to execute a process or activity synchronously. For
      * more information, see "Clocks and time stamps" in topic 2.3.6.1, and "A
      * note about wait (suspend) times" in topic 2.3.7.3.
      * Note: This field is a component of the task suspend time, SUSPTIME (014)
      * field. .
         10  DS-PE-SYNC-SYNCDLY-P1   PIC 9(009) COMP.
         10  DS-PE-SYNC-SYNCDLY-P2   PIC 9(009) COMP.
      * 'The elapsed time in which the user task waited for inbound socket I/O.
      * For more information, see "Clocks and time stamps" in topic 2.3.6.1, and
      * "A note about wait (suspend) times" in topic 2.3.7.3.
      * Note: This field is a component of the task suspend time, SUSPTIME
      * (O14), field.
         10  DS-PE-SOCK-SOIOWTT-P1   PIC 9(009) COMP.
         10  DS-PE-SOCK-SOIOWTT-P2   PIC 9(009) COMP.
      * The elapsed time in which the user task waited for DBCTL to service the
      * IMS requests issued by the user task.
      * For more information, see "Clocks and time stamps" in topic 2.3.6.1, and
      * "A note about wait (suspend) times" in topic 2.3.7.3.
      * Note: This field is a component of the task suspend time, SUSPTIME (014)
      * field. .
         10  DS-PE-DATA-IMSWAIT-P1   PIC 9(009) COMP.
         10  DS-PE-DATA-IMSWAIT-P2   PIC 9(009) COMP.
      * The elapsed time in which the user task waited for a DB2 thread to
      * become available.
      * For more information, see "Clocks and time stamps" in topic 2.3.6.1, and
      * "A note about wait (suspend) times" in topic 2.3.7.3.
      * Note: This field is a component of the task suspend time, SUSPTIME (014)
      * field.
         10  DS-PE-DATA-DB2RDYQW-P1   PIC 9(009) COMP.
         10  DS-PE-DATA-DB2RDYQW-P2   PIC 9(009) COMP.
      *  When CICS is connected to DB2 Version 5 or earlier, and so is not
      *  exploiting the open transaction environment, this field is the elapsed
      *  time in which the user task waited for a CICS DB2 subtask to become
      *  available. When CICS is connected to DB2 Version 6 or later, and so is
      *  using the open transaction environment, this field is the elapsed time
      *  in which the user task waited for a DB2 connection to become available
      *  for use with the user task's open TCB.
      *  For more information, see "Clocks and time stamps" in topic 2.3.6.1,
      *  and "A note about wait (suspend) times" in topic 2.3.7.3.
      *  Note: This field is a component of the task suspend time, SUSPTIME
      *  (014) field.
         10  DS-PE-DATA-DB2CONWT-P1   PIC 9(009) COMP.
         10  DS-PE-DATA-DB2CONWT-P2   PIC 9(009) COMP.
      *  When CICS is connected to DB2 Version 5 or earlier, and so is not
      *  exploiting the open transaction environment, this field is the elapsed
      *  time in which the user task waited for DB2 to service the DB2 EXEC SQL
      *  and IFI requests issued by the user task. When CICS is connected to
      *  DB2 Version 6 or later, and so is using the open transaction
      *  environment, this field does not apply and is zero. This is because in
      *  the open transaction environment, the CICS-DB2 attachment facility
      *  uses L8 mode open TCBs as the thread TCBs, rather than using specially
      *  created subtask TCBs. Any waits in DB2 that occur on a L8 mode TCB are
      *  not visible to the CICS dispatcher domain.
      *
      *  For more information, see "Clocks and time stamps" in topic 2.3.6.1,
      *  and "A note about wait (suspend) times" in topic 2.3.7.3.
      *
      *  Note: This field is a component of the task suspend time, SUSPTIME
      *  (014) field.
         10  DS-PE-DATA-DB2WAIT-P1   PIC 9(009) COMP.
         10  DS-PE-DATA-DB2WAIT-P2   PIC 9(009) COMP.
      * The total elapsed time spent in the JVM by the user task. See "A note
      * about JVM elapsed time and suspend time" in topic 2.3.7.6 for more
      * details.
         10  DS-PE-TASK-JVMTIME-P1   PIC 9(009) COMP.
         10  DS-PE-TASK-JVMTIME-P2   PIC 9(009) COMP.
      * The elapsed time the user task was suspended by the CICS dispatcher
      * while running in the JVM.
      * Note: This field is a subset of the task suspend time, SUSPTIME (014),
      * field.
         10  DS-PE-TASK-JVMSUSP-P1   PIC 9(009) COMP.
         10  DS-PE-TASK-JVMSUSP-P2   PIC 9(009) COMP.
      * The total elapsed time the user task waited on outbound sockets. For
      * more information, see "Clocks and time stamps" in topic 2.3.6.1, and "A
      * note about wait (suspend) times" in topic 2.3.7.3.
      * Note: This field is a component of the task suspend time, SUSPTIME
      * (O14), field.
         10  DS-PE-SOCK-SOOIOWTT-P1   PIC 9(009) COMP.
         10  DS-PE-SOCK-SOOIOWTT-P2   PIC 9(009) COMP.
      *
      * The elapsed time during which the request receiver user task CIRR (or
      * user specified transaction id) waited for any outstanding replies to be
      * satisfied.
      * For more information, see "Clocks and time stamps" in topic 2.3.6.1, and
      * "A note about wait (suspend) times" in topic 2.3.7.3.
      * Note: This field is a component of the task suspend time, SUSPTIME
      * (014), field.
         10  DS-PE-TASK-RQRWAIT-P1   PIC 9(009) COMP.
         10  DS-PE-TASK-RQRWAIT-P2   PIC 9(009) COMP.
      * The elapsed time during which the request processor user task CIRP
      * waited for any outstanding replies to be satisfied.
      * For more information, see "Clocks and time stamps" in topic 2.3.6.1, and
      * "A note about wait (suspend) times" in topic 2.3.7.3.
      * Note: This field is a component of the task suspend time, SUSPTIME
      * (014), field.
         10  DS-PE-TASK-RQPWAIT-P1   PIC 9(009) COMP.
         10  DS-PE-TASK-RQPWAIT-P2   PIC 9(009) COMP.
      * The elapsed time in which the user task was dispatched and/or suspended
      * indoubt whilst processing a syncpoint for an Object Transaction Service
      * (OTS) syncpoint request. For more information, see "Clocks and time
      * stamps" in topic 2.3.6.1, and "A note about wait (suspend) times" in
      * topic 2.3.7.3.
      * Note: This field is a component of the task suspend time, SUSPTIME (014)
      * field.
         10  DS-PE-SYNC-OTSINDWT-P1   PIC 9(009) COMP.
         10  DS-PE-SYNC-OTSINDWT-P2   PIC 9(009) COMP.
      *  The elapsed time spent initializing the JVM environment. For more
      *  information, see "Clocks and time stamps" in topic 2.3.6.1, and "A note
      *  about JVM elapsed time and suspend time" in topic 2.3.7.6.
         10  DS-PE-TASK-JVMITIME-P1   PIC 9(009) COMP.
         10  DS-PE-TASK-JVMITIME-P2   PIC 9(009) COMP.
      *  The elapsed time spent resetting the JVM environment to its initial
      *  state. For more information, see "Clocks and time stamps" in topic
      *  2.3.6.1.
         10  DS-PE-TASK-JVMRTIME-P1   PIC 9(009) COMP.
         10  DS-PE-TASK-JVMRTIME-P2   PIC 9(009) COMP.
      *  The elapsed time in which the user task waited for the 3270 bridge
      *  partner transaction to complete. For more information, see "A note
      *  about wait (suspend) times" in topic 2.3.7.3.
      *
      *  Note: This field is a component of the task suspend time field,
      *  SUSPTIME (group name: DFHTASK, field id: 014).
         10  DS-PE-TASK-PTPWAIT-P1   PIC 9(009) COMP.
         10  DS-PE-TASK-PTPWAIT-P2   PIC 9(009) COMP.
